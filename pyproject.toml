[build-system]
requires = ["setuptools", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dfetch"
authors = [{ name = "Ben Spoor", email = "dfetch@spoor.cc" }]
description = "Dependency fetcher"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.9"
keywords = [
    "dfetch",
    "dependency management",
    "embedded development",
    "fetch tool",
    "vendoring",
    "multi-repo",
    "dependencies",
    "git",
    "svn",
    "package manager",
    "multi-project",
    "monorepo",
]
license = "MIT"
classifiers = [
    # Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
]
dependencies = [
    "PyYAML==6.0.3",
    "coloredlogs==15.0.1",
    "pykwalify==1.8.0",
    "halo==0.0.31",
    "colorama==0.4.6",
    "typing-extensions==4.15.0",
    "tldextract==5.3.0",
    "sarif-om==1.0.4",
    "semver==3.0.4",
    "patch-ng==1.19.0",
    "cyclonedx-python-lib==11.2.0",
    "infer-license==0.1.0; python_version <= '3.10.0'",
    "infer-license==0.2.0; python_version > '3.10.0'",
    'setuptools; python_version >= "3.12"',                  # contains 'pkg_resources' for infer-license
]
dynamic = ["version"]

[project.urls]
Homepage = "https://dfetch-org.github.io/"
Documentation = "https://dfetch.readthedocs.io/"
Repository = "https://github.com/dfetch-org/dfetch"
Issues = "https://github.com/dfetch-org/dfetch/issues"
Changelog = "https://github.com/dfetch-org/dfetch/blob/main/CHANGELOG.rst"


[project.optional-dependencies]
development = [
    # Quality dependencies
    'black==25.9.0',
    'doc8==1.1.2',
    'pydocstyle==6.3.0',
    'radon==6.0.1',
    'xenon==0.9.3',
    'types-PyYAML==6.0.12.20250915',
    'codespell==2.4.1',
    'mypy==1.18.2',
    #'flake8==5.0.4', # version 6.x.x requires python >= 3.8.1 (but 3.7 support window is until 2023-06-27)
    'bandit==1.8.6',
    'vulture==2.14',
    'pyroma==5.0',
    'isort==6.1.0',
    'pylint==3.3.9',
    'pyright==1.1.406',
    "tomli; python_version < '3.11'", # Tomllib is default in 3.11, required for letting codespell read the pyproject.toml
    'pre-commit==4.3.0',
    'ruff==0.14.0',
]
docs = [
    'sphinx==8.2.3',
    'sphinx-argparse==0.5.2',
    'plantweb==1.3.0',
    'sphinxcontrib.asciinema==0.4.2',
    'sphinx_design==0.6.1',
    'sphinxcontrib-details-directive==0.1.0',
    'sphinx-sitemap==2.9.0',
]
test = ['pytest==8.4.2', 'pytest-cov==7.0.0', 'behave==1.3.3']
casts = ['asciinema==2.4.0']
build = [
    'nuitka==2.8.1',
    "tomli; python_version < '3.11'", # Tomllib is default in 3.11, required for letting codespell read the pyproject.toml]
]

[project.scripts]
dfetch = "dfetch.__main__:main"

[tool.setuptools.packages.find]
include = ["dfetch", "dfetch.*"]

[tool.setuptools.package-data]
dfetch = ["resources/*.yaml"]

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_scheme = "guess-next-dev"

[tool.isort]
profile = "black"

# See https://github.com/PyCQA/flake8/issues/234 ðŸ˜¢
[tool.flake8]
max-line-length = 120
max-complexity = 10
select = "B,C,E,F,W,T4"
ignore = "W503"

[tool.mypy]
files = "dfetch"
ignore_missing_imports = true
strict = true
warn_unused_ignores = false

[tool.doc8]
ignore-path = "doc/_build,doc/static/uml/styles/plantuml-c4"
max-line-length = 120
verbose = 0
ignore = "D002,D004"

[tool.pylint.format]
max-line-length = 120
disable = "logging-fstring-interpolation"
min-similarity-lines = 10

[tool.pydocstyle]
convention = "google"

[tool.pytest]
filterwarnings = """
    ignore:.*Using or importing the ABCs.*is deprecated:DeprecationWarning
    ignore:.*the imp module.*is deprecated:DeprecationWarning
"""

[tool.coverage.run]
branch = true
source = ["dfetch"]

[tool.coverage.report]
show_missing = true

[tool.codespell]
skip = "*.cast,./venv,**/plantuml-c4/**,./example,.mypy_cache,./doc/_build/**,./build,*.patch,.git,**/generate-casts/demo-magic/**"

[tool.ruff.lint.per-file-ignores]
"features/steps/*" = ["F811"]

[tool.pyright]
exclude = ["doc/static/uml/generate_diagram.py"]
standard = ["dfetch", "features"]
reportMissingImports = false
reportMissingModuleSource = false
pythonVersion = "3.9"

[tool.nuitka]
mode = "onefile" # Switch this between standalone and onefile as needed
# jobs = "4" # Can be used to reduce memory usage, in case of compilation issues
# Enable below for debugging
# show-progress = true
assume-yes-for-downloads = true

include-package-data="dfetch,infer_license"
include-module="infer_license.licenses"

# python-flag = ["-OO"] # Cannot optimize (yet) commands rely on __doc__ being present

output-dir = "build"
output-filename-win = "dfetch-{VERSION}.exe"
output-filename-linux = "dfetch-{VERSION}-x86_64"
output-filename-macos = "dfetch-{VERSION}-osx"

# windows-icon-from-ico = "static/favicon.ico"
# windows-company-name = "dfetch-org"
