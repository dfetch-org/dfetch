name: Build

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

jobs:

  build:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Setup Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: '3.13'

      - name: ccache
        uses: hendrikmuhs/ccache-action@dfffa42bcd2c0a1984bbb3385deec93444da212d # v1.2
        with:
          key: ${{ github.job }}-${{ matrix.platform }}
          verbose: 1
          create-symlink: ${{ matrix.platform != 'windows-latest' }}

      - name: Create binary
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_NOHASHDIR: true
          NUITKA_CACHE_DIR_CCACHE: $HOME/.ccache
          NUITKA_CCACHE_BINARY: /usr/bin/ccache
        run: |
          pip install .[build]
          python script/build.py

      - name: Store the distribution packages
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: binary-distribution-${{ matrix.platform }}
          path: build/dfetch-*

  test-binary:
    name: test binary
    needs:
    - build
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
    - name: Download the binary artifact
      uses: actions/download-artifact@4a24838f3d5601fd639834081e118c2995d51e1c # v5
      with:
        name: binary-distribution-${{ matrix.platform }}
        path: .

    - name: Prepare binary
      if: matrix.platform == 'ubuntu-latest'
      run: |
        binary=$(ls dfetch-*-x86_64)
        ln -sf "$binary" dfetch
        chmod +x dfetch
        ls -la .
      shell: bash

    - name: Prepare binary
      if: matrix.platform == 'macos-latest'
      run: |
        binary=$(ls dfetch-*-osx)
        ln -sf "$binary" dfetch
        chmod +x dfetch
        ls -la .
      shell: bash

    - name: Prepare binary on Windows
      if: matrix.platform == 'windows-latest'
      run: |
        $binary = Get-ChildItem dfetch-*.exe | Select-Object -First 1
        Copy-Item $binary -Destination dfetch.exe -Force
        Get-ChildItem
      shell: pwsh

    - run: ./dfetch init
    - run: ./dfetch environment
    - run: ./dfetch validate
    - run: ./dfetch check
    - run: ./dfetch update
    - run: ./dfetch update
    - run: ./dfetch report -t sbom
